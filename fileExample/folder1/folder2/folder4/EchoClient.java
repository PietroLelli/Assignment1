/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.ds.lab.sockets.client;

import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.net.Socket;

public class EchoClient {

    public static void main(String[] args) {
        var host = args[0];
        var port = Integer.parseInt(args[1]);
        try {
            echo(host, port);
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (InterruptedException e) {
            // silently ignored
        }
    }

    public static void echo(String host, int port) throws IOException, InterruptedException {
        Socket server = new Socket();

        System.out.printf("Contacting host %s:%d...\n", host, port);
        // connect to the host, possibly with timeout
        server.connect(new InetSocketAddress(host,port), 3000);
        System.out.println("Connection established");

        // TODO:
        // - read bytes from stdin and redirect them to the socket's output stream
        // - read bytes from the socket's input stream and redirect them to stdout
        echoImpl(server);

        System.out.println("Goodbye!");
    }

    private static final int BUFFER_SIZE = 1024;

    private static void echoImpl(Socket server) {
        var buffer = new byte[BUFFER_SIZE];
        try (server) {
            propagateStdinToServer(server, buffer);
            propagateServerToStdout(server, buffer);
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void propagateStdinToServer(Socket server, byte[] buffer) throws IOException {
        // TODO: read bytes from stdin and redirect them to the socket's output stream
        while (true){
            int readBytes = System.in.read(buffer);
            if(readBytes < 0){ //User closed the stream, no bytes read
                server.shutdownOutput(); //Close ONLY THE OUTPUT not the entire socket
                System.out.println("Reached end of input");
                break;
            }else{ //User wrote some chars
                server.getOutputStream().write(buffer, 0, readBytes); //Send only the read bytes in the buffer
                server.getOutputStream().flush();
                System.out.printf("Sent %d bytes to %s\n", readBytes, server.getRemoteSocketAddress());
            }
        }
    }

    private static void propagateServerToStdout(Socket server, byte[] buffer) throws IOException {
        // TODO read bytes from the socket's input stream and redirect them to stdout
        while (true){
            int readBytes = server.getInputStream().read(buffer);

            if(readBytes < 0){ //The Input Stream is already closed here. (When it's finish the byte to read it's close)
                System.out.printf("Received EOF from %s\n", server.getRemoteSocketAddress());
                break;
            }else{
                System.out.printf("Received %d bytes from $s\n", readBytes, server.getRemoteSocketAddress());
                System.out.write(buffer, 0, readBytes);
                System.out.flush();
            }
        }
    }

}
